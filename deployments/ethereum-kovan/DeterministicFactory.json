{
  "address": "0xeFfd5cD1e9ea2de8994c43cECb4E64E3AcBb514C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_creationCode",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "_deployed",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "getDeployed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d06c3d1bd7dd8781633d00f4f97bab0f3ea15bd4e0e8b6839fb03729a3d6538",
  "receipt": {
    "to": null,
    "from": "0x00000000009e650313519698976d764810112681",
    "contractAddress": "0xeFfd5cD1e9ea2de8994c43cECb4E64E3AcBb514C",
    "transactionIndex": 1,
    "gasUsed": "291027",
    "logsBloom": "0x
    "blockHash": "0x129e5b48c81569b345c027a7130248426bc27d49f45258ed6d6a956e602ab5c2",
    "transactionHash": "0x7d06c3d1bd7dd8781633d00f4f97bab0f3ea15bd4e0e8b6839fb03729a3d6538",
    "logs": [],
    "blockNumber": 31388549,
    "cumulativeGasUsed": "312027",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "33c36b480d70c59923ac688364f23303",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_creationCode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_deployed\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getDeployed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(bytes32,bytes,uint256)\":{\"params\":{\"_creationCode\":\"Smart contract creation code (including constructor args)\",\"_salt\":\"Random salt that will help contract's address generation\",\"_value\":\"Amount of ETH to sent on deployment\"},\"returns\":{\"_deployed\":\"The deterministic address of the deployed smart contract\"}},\"getDeployed(bytes32)\":{\"params\":{\"_salt\":\"Random salt that will help contract's address generation\"},\"returns\":{\"_0\":\"The deterministic address of the deployed smart contract i\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(bytes32,bytes,uint256)\":{\"notice\":\"Deploy to deterministic addresses without an initcode factor\"},\"getDeployed(bytes32)\":{\"notice\":\"Get deployed address by salt\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/DeterministicFactory.sol\":\"DeterministicFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/utils/Bytes32AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\",\"keccak256\":\"0x2afc1acba8a77555e061420cab585a5bd4f030c3ad0ac3e0066dbb55e3a8adff\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/CREATE3.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {Bytes32AddressLib} from \\\"./Bytes32AddressLib.sol\\\";\\n\\n/// @notice Deploy to deterministic addresses without an initcode factor.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/CREATE3.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol)\\nlibrary CREATE3 {\\n    using Bytes32AddressLib for bytes32;\\n\\n    //--------------------------------------------------------------------------------//\\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\\n    //--------------------------------------------------------------------------------//\\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 0 size               //\\n    // 0x37       |  0x37                 | CALLDATACOPY     |                        //\\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\\n    // 0x34       |  0x34                 | CALLVALUE        | value 0 size           //\\n    // 0xf0       |  0xf0                 | CREATE           | newContract            //\\n    //--------------------------------------------------------------------------------//\\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\\n    //--------------------------------------------------------------------------------//\\n    // 0x67       |  0x67XXXXXXXXXXXXXXXX | PUSH8 bytecode   | bytecode               //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 bytecode             //\\n    // 0x52       |  0x52                 | MSTORE           |                        //\\n    // 0x60       |  0x6008               | PUSH1 08         | 8                      //\\n    // 0x60       |  0x6018               | PUSH1 18         | 24 8                   //\\n    // 0xf3       |  0xf3                 | RETURN           |                        //\\n    //--------------------------------------------------------------------------------//\\n    bytes internal constant PROXY_BYTECODE = hex\\\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\\\";\\n\\n    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);\\n\\n    function deploy(\\n        bytes32 salt,\\n        bytes memory creationCode,\\n        uint256 value\\n    ) internal returns (address deployed) {\\n        bytes memory proxyChildBytecode = PROXY_BYTECODE;\\n\\n        address proxy;\\n        assembly {\\n            // Deploy a new contract with our pre-made bytecode via CREATE2.\\n            // We start 32 bytes into the code to avoid copying the byte length.\\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), salt)\\n        }\\n        require(proxy != address(0), \\\"DEPLOYMENT_FAILED\\\");\\n\\n        deployed = getDeployed(salt);\\n        (bool success, ) = proxy.call{value: value}(creationCode);\\n        require(success && deployed.code.length != 0, \\\"INITIALIZATION_FAILED\\\");\\n    }\\n\\n    function getDeployed(bytes32 salt) internal view returns (address) {\\n        address proxy = keccak256(\\n            abi.encodePacked(\\n                // Prefix:\\n                bytes1(0xFF),\\n                // Creator:\\n                address(this),\\n                // Salt:\\n                salt,\\n                // Bytecode hash:\\n                PROXY_BYTECODE_HASH\\n            )\\n        ).fromLast20Bytes();\\n\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x01)\\n                    // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\\n                    hex\\\"d6_94\\\",\\n                    proxy,\\n                    hex\\\"01\\\" // Nonce of the proxy contract (1)\\n                )\\n            ).fromLast20Bytes();\\n    }\\n}\\n\",\"keccak256\":\"0x201aae4783e57d5da728bc2541b846ed44cf8b4204ed1a6e185e863a15677b6e\",\"license\":\"AGPL-3.0-only\"},\"solidity/contracts/DeterministicFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\nimport {CREATE3} from '@rari-capital/solmate/src/utils/CREATE3.sol';\\nimport {IDeterministicFactory} from '../interfaces/IDeterministicFactory.sol';\\n\\ncontract DeterministicFactory is IDeterministicFactory {\\n  /// @inheritdoc IDeterministicFactory\\n  function deploy(\\n    bytes32 _salt,\\n    bytes memory _creationCode,\\n    uint256 _value\\n  ) external payable override returns (address _deployed) {\\n    _deployed = CREATE3.deploy(_salt, _creationCode, _value);\\n  }\\n\\n  /// @inheritdoc IDeterministicFactory\\n  function getDeployed(bytes32 _salt) external view override returns (address) {\\n    return CREATE3.getDeployed(_salt);\\n  }\\n}\\n\",\"keccak256\":\"0x3ae82180b655b66f1bc5791c5d264374e00339f0e99a1fa25c1d0c26197a2ae6\",\"license\":\"AGPL-3.0-only\"},\"solidity/interfaces/IDeterministicFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\n/// @title Interface for using the DeterministicFactory\\n/// @notice These methods allow users or developers to interact with CREATE3 library from solmate\\ninterface IDeterministicFactory {\\n  /// @notice Deploy to deterministic addresses without an initcode factor\\n  /// @param _salt Random salt that will help contract's address generation\\n  /// @param _creationCode Smart contract creation code (including constructor args)\\n  /// @param _value Amount of ETH to sent on deployment\\n  /// @return _deployed The deterministic address of the deployed smart contract\\n  function deploy(\\n    bytes32 _salt,\\n    bytes memory _creationCode,\\n    uint256 _value\\n  ) external payable returns (address _deployed);\\n\\n  /// @notice Get deployed address by salt\\n  /// @param _salt Random salt that will help contract's address generation\\n  /// @return The deterministic address of the deployed smart contract i\\n  function getDeployed(bytes32 _salt) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb67b88396686f5e5fd9bcababf24277d6e5f21b9af739df5d27c92889fad579e\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061044d806100206000396000f3fe6080604052600436106100295760003560e01c8063c7aeef0f1461002e578063df20e2521461005d575b600080fd5b61004161003c366004610302565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b34801561006957600080fd5b506100416100783660046102e9565b610092565b600061008a8484846100a3565b949350505050565b600061009d826101fe565b92915050565b6000806040518060400160405280601081526020016f67363d3d37363d34f03d5260086018f360801b81525090506000858251602084016000f590506001600160a01b03811661012e5760405162461bcd60e51b81526020600482015260116024820152701111541313d65351539517d19052531151607a1b60448201526064015b60405180910390fd5b610137866101fe565b92506000816001600160a01b0316858760405161015491906103c6565b60006040518083038185875af1925050503d8060008114610191576040519150601f19603f3d011682016040523d82523d6000602084013e610196565b606091505b505090508080156101b057506001600160a01b0384163b15155b6101f45760405162461bcd60e51b815260206004820152601560248201527412539255125053125690551253d397d19052531151605a1b6044820152606401610125565b5050509392505050565b604080518082018252601081526f67363d3d37363d34f03d5260086018f360801b60209182015290516001600160f81b0319918101919091526bffffffffffffffffffffffff193060601b166021820152603581018290527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f605582015260009081906102a2906075015b6040516020818303038152906040528051906020012090565b6040516135a560f21b60208201526bffffffffffffffffffffffff19606083901b166022820152600160f81b60368201529091506102e290603701610289565b9392505050565b6000602082840312156102fb57600080fd5b5035919050565b60008060006060848603121561031757600080fd5b83359250602084013567ffffffffffffffff8082111561033657600080fd5b818601915086601f83011261034a57600080fd5b81358181111561035c5761035c610401565b604051601f8201601f19908116603f0116810190838211818310171561038457610384610401565b8160405282815289602084870101111561039d57600080fd5b826020860160208301376000602084830101528096505050505050604084013590509250925092565b6000825160005b818110156103e757602081860181015185830152016103cd565b818111156103f6576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e82d3ea5f58b76863052fa7bee42b7f4eba5c172af6f824214b7ee2dd28e481264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c8063c7aeef0f1461002e578063df20e2521461005d575b600080fd5b61004161003c366004610302565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b34801561006957600080fd5b506100416100783660046102e9565b610092565b600061008a8484846100a3565b949350505050565b600061009d826101fe565b92915050565b6000806040518060400160405280601081526020016f67363d3d37363d34f03d5260086018f360801b81525090506000858251602084016000f590506001600160a01b03811661012e5760405162461bcd60e51b81526020600482015260116024820152701111541313d65351539517d19052531151607a1b60448201526064015b60405180910390fd5b610137866101fe565b92506000816001600160a01b0316858760405161015491906103c6565b60006040518083038185875af1925050503d8060008114610191576040519150601f19603f3d011682016040523d82523d6000602084013e610196565b606091505b505090508080156101b057506001600160a01b0384163b15155b6101f45760405162461bcd60e51b815260206004820152601560248201527412539255125053125690551253d397d19052531151605a1b6044820152606401610125565b5050509392505050565b604080518082018252601081526f67363d3d37363d34f03d5260086018f360801b60209182015290516001600160f81b0319918101919091526bffffffffffffffffffffffff193060601b166021820152603581018290527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f605582015260009081906102a2906075015b6040516020818303038152906040528051906020012090565b6040516135a560f21b60208201526bffffffffffffffffffffffff19606083901b166022820152600160f81b60368201529091506102e290603701610289565b9392505050565b6000602082840312156102fb57600080fd5b5035919050565b60008060006060848603121561031757600080fd5b83359250602084013567ffffffffffffffff8082111561033657600080fd5b818601915086601f83011261034a57600080fd5b81358181111561035c5761035c610401565b604051601f8201601f19908116603f0116810190838211818310171561038457610384610401565b8160405282815289602084870101111561039d57600080fd5b826020860160208301376000602084830101528096505050505050604084013590509250925092565b6000825160005b818110156103e757602081860181015185830152016103cd565b818111156103f6576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e82d3ea5f58b76863052fa7bee42b7f4eba5c172af6f824214b7ee2dd28e481264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(bytes32,bytes,uint256)": {
        "params": {
          "_creationCode": "Smart contract creation code (including constructor args)",
          "_salt": "Random salt that will help contract's address generation",
          "_value": "Amount of ETH to sent on deployment"
        },
        "returns": {
          "_deployed": "The deterministic address of the deployed smart contract"
        }
      },
      "getDeployed(bytes32)": {
        "params": {
          "_salt": "Random salt that will help contract's address generation"
        },
        "returns": {
          "_0": "The deterministic address of the deployed smart contract i"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(bytes32,bytes,uint256)": {
        "notice": "Deploy to deterministic addresses without an initcode factor"
      },
      "getDeployed(bytes32)": {
        "notice": "Get deployed address by salt"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}